/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jukebox;

import Model.CurrentSong;
import DbManip.DataManip;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javazoom.jlgui.basicplayer.*;
/**
 *
 * @author Anand
 * @author Vamshi
 */
public class MusicPlayer extends javax.swing.JFrame implements DropTargetListener,ActionListener{

    /**
     * Creates new form MusicPlayer
     */
    private BasicController mcntrl;
    private BasicPlayer mply;
    private int paused,currentlyPlayed;

    /**
     *
     */
    public static String pth;
    private CurrentSong c;
    
    public MusicPlayer() {
        initComponents();
        this.Edit.setVisible(false);
//        DefaultMutableTreeNode root=new DefaultMutableTreeNode("/");
//        DefaultMutableTreeNode playlist=new DefaultMutableTreeNode("Playlist");
//        DefaultMutableTreeNode library=new DefaultMutableTreeNode("Library");
//        root.add(library);
//        root.add(playlist);
//        JTree lib=new JTree(root);
//        JScrollPane jsp=new JScrollPane();
//        jsp.add(lib);
//        jPanel4.add(jsp);
//        this.add(jPanel4);
        this.setVisible(true);
        this.setTitle("JukeBox 0.1");
        this.mply=new BasicPlayer();
        this.mcntrl=(BasicController) this.mply;
        DropTarget mp3_dt=new DropTarget(this.jTable1,this);
               
        try
        {
            this.mcntrl.setGain(0.5);
        }catch(BasicPlayerException bpex)
        {
            
        }
        jTable1.setColumnSelectionAllowed(false);
        jTable1.setRowSelectionAllowed(true);
        jTable1.setDragEnabled(true);
        this.VolumeLabel.setText("50");
        this.data_rtv();
    }

    private void rowPopulate(CurrentSong c)
    {
        DefaultTableModel dtm=(DefaultTableModel)this.jTable1.getModel();
        Vector row=new Vector();
        row.add(c.getTitle());
        row.add(c.getFleName().replace("/", "\\"));
        row.add(c.getAlbum());
        row.add(c.getArtist());
        row.add(c.getDuration());
        dtm.addRow(row);
           
    }
    
    private void tabPopulate(String colmn[][],int r_cnt)
    {
        DefaultTableModel dtm=(DefaultTableModel)this.jTable1.getModel();
        for(int i=0;i<r_cnt;i++)
        {
            Vector row=new Vector();
         for(int j=0;j<5;j++)    
         {
            if(j==1)
            {
                row.add(colmn[i][j].replace("/", "\\"));   
            }
            else
            {
                row.add(colmn[i][j]);   
            }
         }
            dtm.addRow(row);
        }    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        SeekBar = new javax.swing.JProgressBar();
        Play = new javax.swing.JButton();
        Stop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        VolumeSlider = new javax.swing.JSlider();
        Pause = new javax.swing.JButton();
        VolumeLabel = new javax.swing.JLabel();
        Next = new javax.swing.JButton();
        Previous = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Root = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        AddSong = new javax.swing.JMenuItem();
        DeleteSong = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Path", "Album", "Artist", "Duration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setName("Library"); // NOI18N
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(7);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(4);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(2);
        }

        jPanel2.setBackground(new java.awt.Color(255, 245, 187));

        Play.setText(">");
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });

        Stop.setText("[]");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        jLabel1.setText("00:00");

        VolumeSlider.setName("VolumeSlider"); // NOI18N
        VolumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                VolumeSliderStateChanged(evt);
            }
        });
        VolumeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VolumeSliderMouseClicked(evt);
            }
        });

        Pause.setText("||");
        Pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseActionPerformed(evt);
            }
        });

        VolumeLabel.setText("50");

        Next.setText("->>");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Previous.setText("<<-");
        Previous.setActionCommand("");
        Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousActionPerformed(evt);
            }
        });

        jLabel4.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.foreground"));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/jukebox.jpg"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Sa.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Re.png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Ma.png"))); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Re.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Ga.png"))); // NOI18N
        jLabel7.setToolTipText("");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Ma.png"))); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Ga.png"))); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jukebox/Sa.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SeekBar, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel3)
                                        .addGap(87, 87, 87)
                                        .addComponent(Previous)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Pause)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Play)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Stop)
                                        .addGap(6, 6, 6)
                                        .addComponent(Next))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addComponent(jLabel2)))
                                .addGap(73, 73, 73)
                                .addComponent(jLabel6)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel9)))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(VolumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VolumeLabel)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel4)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGap(13, 13, 13))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VolumeLabel)
                            .addComponent(VolumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel7))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(SeekBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(Previous)
                                                        .addComponent(Pause)
                                                        .addComponent(Play)
                                                        .addComponent(Stop)
                                                        .addComponent(Next)
                                                        .addComponent(jLabel6))
                                                    .addComponent(jLabel9))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel2)))))
                                .addGap(0, 9, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Library");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Playlist");
        treeNode1.add(treeNode2);
        Root.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(Root);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        FileMenu.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        FileMenu.add(Open);

        AddSong.setText("Add");
        AddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSongActionPerformed(evt);
            }
        });
        FileMenu.add(AddSong);

        DeleteSong.setText("Delete");
        DeleteSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteSongActionPerformed(evt);
            }
        });
        FileMenu.add(DeleteSong);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        FileMenu.add(Exit);

        jMenuBar1.add(FileMenu);

        Edit.setText("Edit");
        jMenuBar1.add(Edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        // TODO add your handling code here:
        
        try
        {
            if(paused==1)
            {
                paused=0;
                this.mply.resume();
            }
            else
            {
                int r = this.jTable1.getSelectedRow();
                if(r>=0)
                {
                    currentlyPlayed=r;
                    System.out.println(currentlyPlayed);
                    if(!(this.jTable1.getModel().getValueAt(r, 1).toString().equals("")))
                    {    
                        jTable1.clearSelection(); 
                        jTable1.setSelectionBackground(Color.CYAN);
                        jTable1.changeSelection(r,r,false,false);
                        
                        String fPath=this.jTable1.getModel().getValueAt(r, 1).toString();
                        System.out.println(fPath);
                        this.mply.open(new File(fPath));
                        this.jLabel1.setText(this.jTable1.getModel().getValueAt(r,4).toString());
                        this.mply.play();
                    }
                }
            }
        }catch(BasicPlayerException bpex)
        {
            System.out.println(bpex.getMessage());
        }
    }//GEN-LAST:event_PlayActionPerformed

    private void VolumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_VolumeSliderStateChanged
        // TODO add your handling code here:
        try
        {
            int vol=this.VolumeSlider.getValue();
            double sldr_val=vol*0.01;
            this.mcntrl.setGain(sldr_val);
            this.VolumeLabel.setText(""+vol+"");
        }catch(BasicPlayerException bpex)
        {
            
        }
    }//GEN-LAST:event_VolumeSliderStateChanged

    private void PauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseActionPerformed
        // TODO add your handling code here:
        try
        {
            paused=1;
            this.mply.pause();
        }catch(BasicPlayerException bpex)
        {
            
        }
    }//GEN-LAST:event_PauseActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
           
    }//GEN-LAST:event_jTable1MouseClicked

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        // TODO add your handling code here:
        try
        {
            paused=0;
            this.mply.stop();
        }catch(BasicPlayerException bpex)
        {
            
        }
    }//GEN-LAST:event_StopActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        // TODO add your handling code here:
        try
        {       
            File f=null;
            JFileChooser jfc=new JFileChooser();
            jfc.setFileFilter(new FileNameExtensionFilter("Music file","mp3","wav"));
            int slctVal=jfc.showOpenDialog(this);
            if(slctVal==JFileChooser.APPROVE_OPTION);
            {
                 try
                {
                    f=jfc.getSelectedFile();
                    c=new CurrentSong(f.getAbsolutePath().replace("\\", "/"));
                    this.rowPopulate(c);
            }catch(NullPointerException npe)
            {
                
            }
        }
            if(f!=null)
            {
                this.mply.open(f);
                this.jLabel1.setText(c.getDuration());
                currentlyPlayed=this.jTable1.getModel().getRowCount();
                addSong(c);
                this.mply.play();
            }
        }catch(BasicPlayerException bpex)
        {
          System.out.println(bpex.getMessage());
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void VolumeSliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VolumeSliderMouseClicked
        // TODO add your handling code here:
        final BasicSliderUI bu=(BasicSliderUI)VolumeSlider.getUI();
        Point clk=evt.getPoint();
        int vol=bu.valueForXPosition(clk.x);
        VolumeSlider.setValue(vol);
    }//GEN-LAST:event_VolumeSliderMouseClicked

    private void AddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSongActionPerformed
        // TODO add your handling code here:
        File f=addMusicFile();
        if(f!=null)
            addSong(c);
    }//GEN-LAST:event_AddSongActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        if(this.jTable1.getModel().getRowCount()!=(currentlyPlayed+1))
        {
            try
            {
                currentlyPlayed=currentlyPlayed+1;
                if(!(this.jTable1.getModel().getValueAt(currentlyPlayed, 1).toString().equals("")))
                {    
                    this.jTable1.clearSelection();
                    String fPath=this.jTable1.getModel().getValueAt(currentlyPlayed, 1).toString();
                    this.mply.open(new File(fPath));
                    this.jLabel1.setText(this.jTable1.getModel().getValueAt(currentlyPlayed,4).toString());
                    this.mply.play();
                    jTable1.setSelectionBackground(Color.CYAN);
                    jTable1.changeSelection(currentlyPlayed,currentlyPlayed,false,false);
                }
            }catch(BasicPlayerException bpex){
                
            }
        }
    }//GEN-LAST:event_NextActionPerformed

    private void PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousActionPerformed
        // TODO add your handling code here:
        if(currentlyPlayed-1>=0)
        {
            try
            {
                currentlyPlayed=currentlyPlayed-1;
                if(!(this.jTable1.getModel().getValueAt(currentlyPlayed, 1).toString().equals("")))
                {    
                    this.jTable1.clearSelection();
                    String fPath=this.jTable1.getModel().getValueAt(currentlyPlayed, 1).toString();
                    this.mply.open(new File(fPath));
                    this.jLabel1.setText(this.jTable1.getModel().getValueAt(currentlyPlayed,4).toString());
                    this.mply.play();
                    jTable1.setSelectionBackground(Color.CYAN);
                    jTable1.changeSelection(currentlyPlayed,currentlyPlayed,false,false);
                }
            }catch(BasicPlayerException bpex)
            {
                
            }
        }
    }//GEN-LAST:event_PreviousActionPerformed

    private void DeleteSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteSongActionPerformed
        // TODO add your handling code here:
        int r=this.jTable1.getSelectedRow();
        if(r>=0)
        {
            if(r!=currentlyPlayed)
            {
                if(!(this.jTable1.getModel().getValueAt(r, 1).toString().equals("")))
                {
                    DefaultTableModel dt_refresh=(DefaultTableModel) this.jTable1.getModel();
                    String rm_song=dt_refresh.getValueAt(r, 1).toString();
                    dt_refresh.setRowCount(0);
                    removeSong(rm_song);
                    this.data_rtv();
                }
            }
            else
            {
                System.out.println("Cannot delete song which is being played currently");
            }
        }
    }//GEN-LAST:event_DeleteSongActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_jTable1MousePressed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:            
                final JPopupMenu jpm=new JPopupMenu();
                JMenuItem addSong = new JMenuItem("Add song");
                JMenuItem removeSong = new JMenuItem("Remove song");
                jpm.add(addSong);
                jpm.add(removeSong);

                this.jTable1.addMouseListener( new MouseAdapter()
                {
                    @Override
                    public void mousePressed(MouseEvent e)
                    {
                        
                    }
                    @Override
                    public void mouseReleased(MouseEvent e)
                    {
                        if(e.isPopupTrigger())
                        {
                            jpm.show(e.getComponent(),e.getX(),e.getY());                            
                        }
                    }
                });
                
                addSong.addMouseListener(new MouseAdapter(){
                    
                    @Override
                    public void mousePressed(MouseEvent e)
                    {
                        File f=addMusicFile();
                        if(f!=null)
                        addSong(c);                      
                    }
                });
                
                removeSong.addMouseListener(new MouseAdapter(){
                    @Override
                    public void mousePressed(MouseEvent e)
                    {
                        int r=MusicPlayer.this.jTable1.getSelectedRow();
                        if(r>=0)
                        {
                            if(r!=currentlyPlayed)
                            {
                                 int selectedRow = jTable1.getSelectedRow();
                                 String fpath =  jTable1.getValueAt(selectedRow, 1).toString();
                                 DefaultTableModel dt_refresh=(DefaultTableModel) jTable1.getModel();
                                 dt_refresh.setRowCount(0);
                                 removeSong(fpath);
                                 data_rtv();
                            } else {
                                System.out.println("Cannot delete currently played song");
                            }
                        } 
                    }
                });
    
    }//GEN-LAST:event_jTable1MouseReleased
   
    private File addMusicFile()
    {
        File f=null;
        JFileChooser jfc=new JFileChooser();
        jfc.setFileFilter(new FileNameExtensionFilter("Music file","mp3","wav"));
        int slctVal=jfc.showOpenDialog(this);
        if(slctVal==JFileChooser.APPROVE_OPTION);
        {
            try
            {
                f=jfc.getSelectedFile();
                c=new CurrentSong(f.getAbsolutePath().replace("\\", "/"));
                this.rowPopulate(c);
            }catch(NullPointerException npe)
            {
                
            }
        }
        return f;
    }
    
   
    private void populate_songs(ResultSet rs,int cnt)
    {
        String columns[][]=new String[cnt][5];
        int i=0;
        try
        {
         while(rs.next())
         {
             columns[i][0]=rs.getString(1);
             columns[i][1]=rs.getString(2);
             columns[i][2]=rs.getString(3);
             columns[i][3]=rs.getString(4);
             columns[i][4]=rs.getString(5);
             i++;   
         } 
        }catch(SQLException se)
        {
            System.out.println(se.getMessage());
        }       
        tabPopulate(columns,i);
    }
    
    private void data_rtv()
    {
        try
        {
            int count =0 ;
            DataManip dt_cnt=new DataManip();
            String sel_cnt="Select count(*) from songs";
            ResultSet rsCnt=dt_cnt.ExecuteReader(sel_cnt);
            
            while(rsCnt.next()){
                count = rsCnt.getInt(1);
            }
            dt_cnt.getConn().close();

            if(count > 0){
                DataManip dt_sel=new DataManip();
                String sel_sql="Select * from songs";
                ResultSet rs=dt_sel.ExecuteReader(sel_sql);
                populate_songs(rs,count);
                dt_sel.getConn().close();
            }
        }catch(SQLException se)
        {
            System.out.println(se.getMessage());
        }
    }
    
    public void addSong(CurrentSong cs)
    {
        DataManip dt_add=new DataManip();
        String ins_sql="Insert into songs(Name,Path,Album,Artist,Duration) values('" + cs.getTitle() + "','" + cs.getFleName() + "','" +cs.getAlbum()+ "','" +cs.getArtist()+ "','" + cs.getDuration()+"')";
        dt_add.ExecuteQuery(ins_sql);
    }
    
    public void removeSong(String fpath)
    {
        fpath=fpath.replace("\\","/");
        DataManip dt_rm=new DataManip();
        String del_sql="Delete from songs where path='"+fpath+"'";
        dt_rm.ExecuteQuery(del_sql);
    }
    
    public void drop(DropTargetDropEvent dtd_evt)
    {
        dtd_evt.acceptDrop(DnDConstants.ACTION_COPY);
        Transferable mp3_trns=dtd_evt.getTransferable();
        DataFlavor[] dt_flv=mp3_trns.getTransferDataFlavors();
        
        for(DataFlavor f : dt_flv)
        {
            try
            {
                if(f.isFlavorJavaFileListType())
                {
                    List<File> l =(List) mp3_trns.getTransferData(f);
                    for (Iterator<File> it = l.iterator(); it.hasNext();) 
                    {
                        File fl = it.next();
                        String fname=fl.getPath();
                        if(fname.endsWith(".mp3") || fname.endsWith(".wmv"))
                        {
                            c=new CurrentSong(fname.replace("\\", "/"));
                            int existing=0;
                            for(int i=0;i<this.jTable1.getRowCount();i++)
                            {
                                if(fname.equals(this.jTable1.getModel().getValueAt(i,1)))
                                {
                                    existing=1;
                                    break;
                                }
                            }
                            if(existing==0)
                                this.addSong(c);
                            this.rowPopulate(c);
                        }
                        else
                        {
                            System.out.println("Error:Not a music file!");
                        }
                        
                    }
                }
            }catch(Exception ex)
            {
                
            }
        }
        dtd_evt.dropComplete(true);
    }
    
    public void dragEnter(DropTargetDragEvent dtde_evt)
    {
        
    }
  
    public void dragExit(DropTargetEvent dte_evt)
    {
        
    }
    
    public void dragOver(DropTargetDragEvent do_evt)
    {
        int rw=this.jTable1.getSelectedRow();
        pth=(String)this.jTable1.getValueAt(rw, 1);
    }
    
    public void dropActionChanged(DropTargetDragEvent da_evt)
    {
        
    }

    private void addNewRow() {
        File f=addMusicFile();
        addSong(c);
        //jTable1.addSong(new String[0]);
    }
     
    private void removeCurrentRow() {
        int selectedRow = jTable1.getSelectedRow();
       // tableModel.removeRow(selectedRow);
        String fpath =  jTable1.getValueAt(selectedRow, 1).toString();
        DataManip dt_rm=new DataManip();
        String del_sql="Delete from songs where path='"+fpath+"'";
        dt_rm.ExecuteQuery(del_sql);
    }
    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicPlayer().setVisible(true);
            }
        });
    }
    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddSong;
    private javax.swing.JMenuItem DeleteSong;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JButton Next;
    private javax.swing.JMenuItem Open;
    private javax.swing.JButton Pause;
    private javax.swing.JButton Play;
    private javax.swing.JButton Previous;
    private javax.swing.JTree Root;
    private javax.swing.JProgressBar SeekBar;
    private javax.swing.JButton Stop;
    private javax.swing.JLabel VolumeLabel;
    private javax.swing.JSlider VolumeSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        
    }

    
}
